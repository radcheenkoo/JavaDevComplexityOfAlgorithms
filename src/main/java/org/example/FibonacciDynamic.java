package org.example;


/**
 *
 * Просторова складність:
 *
 *  Просторова складність алгоритму становить 0(n),
 * тому що використовується додатковий обсяг памяті,
 * який залежить від розміру вхідних даних n.
 *
 *
 * Часова складність:
 *
 * Часова складність алгоритму так само дорівнює 0(n),
 * тому що ітерація циклу вимагає певного часу,
 * тут виконуються лише проста арифметична дія(додавання).
 *
 *
 *
 * Короткий опис до алгоритму:
 *
 * В данному випадку алгоритм використовує динамічнне програмування,
 * він запамятовує проміжні значення для уникнення зайвих
 * повторних обчислень. Такий підхід підвищує ефективність
 * алгоритму в прорівнянні з рекурсивним методом,
 * особливо при великих значеннях n(вхідних данних).
 *
 */
public class FibonacciDynamic {
    private int[] fib;

    public FibonacciDynamic(int n){
        fib = new int[n + 1];
        fib[1] = 1;
    }

    public int calculateFibonacci(int n){

        for (int i = 2; i <= n; i++){

            fib[i] = fib[i - 1] + fib[i - 2];

        }
        return fib[n];
    }

}
